# -*- coding: utf-8 -*-
"""house prices.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GSy1ife5FBahXaD6dI3jB_XoFzy0wdL8
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import missingno as msno
from sklearn.metrics import mean_squared_error
import seaborn as sns
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
data_train=pd.read_csv("train_house.csv")
data_train

le =LabelEncoder()
columns_to_encode =["Alley","MSZoning","Street","LandContour","Utilities","LotConfig","LandSlope",
           "Neighborhood","Condition1","Condition2","BldgType","HouseStyle","RoofStyle","RoofMatl","MasVnrType","LotShape","ExterQual",
           "ExterCond","Foundation","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC",
           "CentralAir","Electrical","KitchenQual","Functional","GarageType","GarageFinish","GarageQual","GarageCond","PavedDrive","SaleCondition","SaleType","FireplaceQu","PoolQC","Fence","MiscFeature",
                    "Exterior1st","Exterior2nd"]
for column in columns_to_encode:
    data_train[column] = le.fit_transform(data_train[column])

data_train.fillna(0,inplace=True)
data_train

correlation_matrix = data_train.corr()
threshold = 0.5
selected_features = correlation_matrix[correlation_matrix['SalePrice'].abs() > threshold]['SalePrice']
print("Selected features based on correlation with target:", selected_features.index.tolist())

## defining X and Y
X=np.array(data_train[["OverallQual","YearBuilt","YearRemodAdd","ExterQual","BsmtQual","TotalBsmtSF",
                             "1stFlrSF","GrLivArea","FullBath","KitchenQual","TotRmsAbvGrd","GarageFinish","GarageCars",
                             "GarageArea"]])
Y=np.array(data_train[["SalePrice"]])

##definig X_tarin & X_val and Y_train & Y_val
X_train, X_eval, Y_train, Y_eval = train_test_split(X, Y, test_size=0.2)

## creating  the model
model=tf.keras.models.Sequential([
tf.keras.layers.Dense(14,activation="selu") ,                  ##input layer
tf.keras.layers.Dense(65,activation="PReLU"),          ##hiddenlayer 1
tf.keras.layers.Dense(35,activation="ELU"),          ##hidden layer2
                                   tf.keras.layers.Dense(1,activation="linear"),          #output layer
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='mae')

output=model.fit(X_train,Y_train,epochs=600)

plt.plot(output.history["loss"])

model.evaluate(X_eval,Y_eval)

from google.colab import drive
drive.mount('/content/drive')

# Save the entire model
model.save(r"/content/house prices.h5")

loaded_model = tf.keras.models.load_model(r"/content/house prices.h5")

data_test=pd.read_csv("test.csv")

le =LabelEncoder()
columns_to_encode =["Alley","MSZoning","Street","LandContour","Utilities","LotConfig","LandSlope",
           "Neighborhood","Condition1","Condition2","BldgType","HouseStyle","RoofStyle","RoofMatl","MasVnrType","LotShape","ExterQual",
           "ExterCond","Foundation","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC",
           "CentralAir","Electrical","KitchenQual","Functional","GarageType","GarageFinish","GarageQual","GarageCond","PavedDrive","SaleCondition","SaleType","FireplaceQu","PoolQC","Fence","MiscFeature",
                    "Exterior1st","Exterior2nd"]
for column in columns_to_encode:
    data_test[column] = le.fit_transform(data_test[column])

data_test.fillna(0,inplace=True)

## defining X_test
X_test=np.array(data_test[["OverallQual","YearBuilt","YearRemodAdd","ExterQual","BsmtQual","TotalBsmtSF",
                             "1stFlrSF","GrLivArea","FullBath","KitchenQual","TotRmsAbvGrd","GarageFinish","GarageCars",
                             "GarageArea"]])

predictions = loaded_model.predict(X_test)

predictions

